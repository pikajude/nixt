use crate::expr::*;
use crate::lexer::{LexError, Token};
use crate::span::{FileSpan, Spanned};
use arena::Arena;
use codespan::{ByteOffset, FileId};

grammar<'input>(
  arena: &Arena<Expr>,
  file_id: FileId,
);

extern {
  type Location = usize;
  type Error = (usize, LexError<'input>, usize);

  enum Token<'input> {
    ID => Token::Id(<&'input str>),
    Str => Token::Str(<&'input str>),
    IndStr => Token::IndStr(<&'input str>),
    Uri => Token::Uri(<&'input str>),
    Path => Token::Path(<&'input str>),
    HPath => Token::HomePath(<&'input str>),
    NPath => Token::NixPath(<&'input str>),
    ind_open => Token::IndStringOpen,
    ind_close => Token::IndStringClose,
    Int => Token::Int(<i64>),
    Float => Token::Float(<f64>),
    "assert" => Token::Assert,
    "else" => Token::Else,
    "let" => Token::Let,
    "if" => Token::If,
    "in" => Token::In,
    "inherit" => Token::Inherit,
    "or" => Token::OrKw,
    "rec" => Token::Rec,
    "then" => Token::Then,
    "with" => Token::With,
    "..." => Token::Ellipsis,
    "${" => Token::DollarCurly,
    "==" => Token::Eq,
    "!=" => Token::Neq,
    "++" => Token::Concat,
    "||" => Token::Or,
    "&&" => Token::And,
    "->" => Token::Impl,
    "<=" => Token::Leq,
    ">=" => Token::Geq,
    "//" => Token::Update,
    "<" => Token::Any('<'),
    ">" => Token::Any('>'),
    "!" => Token::Any('!'),
    ":" => Token::Any(':'),
    ";" => Token::Any(';'),
    "{" => Token::Any('{'),
    "}" => Token::Any('}'),
    "(" => Token::Any('('),
    ")" => Token::Any(')'),
    "[" => Token::Any('['),
    "]" => Token::Any(']'),
    "," => Token::Any(','),
    "?" => Token::Any('?'),
    "@" => Token::Any('@'),
    "=" => Token::Any('='),
    "." => Token::Any('.'),
    "-" => Token::Any('-'),
    "+" => Token::Any('+'),
    "*" => Token::Any('*'),
    "/" => Token::Any('/'),
    quote => Token::Any('"')
  }
}

pub Expr = expr;

expr = expr_function;

expr_function: ExprRef = {
  S<(S<ID> S<":"> expr_function)> => <>.map(|(arg,colon,e)| arena.alloc(
    Expr::Lambda(Lambda {
      argument: arg.map(|x|LambdaArg::Plain(x.into())),
      colon: colon.def(),
      body: e
    })
  )),
  S<(formals_at S<":"> expr_function)> => <>.map(|(arg,colon,e)| arena.alloc(
    Expr::Lambda(Lambda {
      argument: arg.map(LambdaArg::Formals),
      colon: colon.def(),
      body: e
    })
  )),
  S<(S<"assert"> expr S<";"> expr_function)> => <>.map(|(ass,cond,semi,child)|
    arena.alloc(
      Expr::Assert(Assert {
        assert: ass.def(),
        cond,
        semi: semi.def(),
        expr: child
      })
    )),
  S<(S<"with"> expr S<";"> expr_function)> => <>.map(|(with,parent,semi,child)|
    arena.alloc(
      Expr::With(With {
        with: with.def(),
        env: parent,
        semi: semi.def(),
        expr: child,
      })
    )),
  // let in <expr> is valid syntax
  S<(S<"let"> S<binding*> S<"in"> expr_function)>
    => <>.map(|(let_,binds,in_,rhs)| arena.alloc(Expr::Let(Let {
      let_: let_.def(),
      binds,
      in_: in_.def(),
      rhs,
    }))),
  expr_if,
}

formals_at: Spanned<Formals> = {
  S<(formals S<"@"> S<ID>)> => <>.map(|(mut fs, symbol, name)| {
    fs.at = Some(FormalsAt {
      at: symbol.def(),
      name: name.map(|x|x.into())
    });
    fs
  }),
  S<(S<ID> S<"@"> formals)> => <>.map(|(name, symbol, mut fs)| {
    fs.at = Some(FormalsAt {
      at: symbol.def(),
      name: name.map(|x|x.into())
    });
    fs
  }),
  S<formals>
}

formals: Formals = {
  <open:S<"{">> <ell:S<"...">?> <close:S<"}">> => Formals {
    open: open.def(),
    args: vec![],
    ellipsis: ell.map(|x|x.def()),
    at: None,
    close: close.def(),
  },
  <open:S<"{">>
    <f1:formal>
    <rest:("," <formal>)*> <ell:("," <S<"...">?>)?>
  <close:S<"}">> => {
    let mut v = vec![f1];
    v.extend(rest);
    Formals {
      open: open.def(),
      args: v,
      ellipsis: ell.flatten().map(|x|x.def()),
      at: None,
      close: close.def(),
    }
  },
}

formal: Spanned<Formal> = {
  S<ID> => <>.map(|x|Formal { arg_name: <>.replace(x.into()), fallback: None }),
  S<(S<ID> S<"?"> expr)> => <>.map(|(name,q,fallback)|
    Formal {
      arg_name: name.map(|x|x.into()),
      fallback: Some(FormalDef {
        question: q.def(),
        default: fallback,
      }),
    }
  ),
}

binding: Spanned<Binding> = {
  S<(attrpath S<"="> expr S<";">)> => <>.map(|(path,eq,rhs,semi)|
    Binding::Plain { path, eq: eq.def(), rhs, semi: semi.def() }
  ),
  S<(S<"inherit"> attrlist S<";">)> => <>.map(|(i,attrs,semi)|
    Binding::Inherit { inherit: i.def(), from: None, attrs, semi: semi.def() }
  ),
  S<(S<"inherit"> S<"("> expr S<")"> attrlist S<";">)>
    => <>.map(|(i,p1,e,p2,attrs,semi)|
      Binding::Inherit {
        inherit: i.def(),
        from: Some(InheritFrom {
          open: p1.def(),
          from: e,
          close: p2.def(),
        }),
        attrs,
        semi: semi.def()
      }
    )
    //Binding::Inherit { from: Some(from), attrs },
}

attrpath: AttrPath = {
  <start:attr_single> <path:("." <attr_single>)*>
    => { let mut v = vec![start]; v.extend(path); AttrPath(v) }
}

attrlist: AttrList = {
  attr_single* => AttrList(<>),
}

attr_single: Spanned<AttrName> = {
  S<ID> => <>.map(|x|AttrName::Plain(x.into())),
  S<"or"> => <>.replace(AttrName::Plain("or".into())),
  S<(S<quote> str_part* S<quote>)> => <>.map(|(open,body,close)| AttrName::Str {
    open: open.def(),
    body,
    close: close.def(),
  }),
  S<(S<"${"> expr S<"}">)> => <>.map(|(open,body,close)| AttrName::Dynamic {
    open: open.def(),
    quote: body,
    close: close.def()
  })
}

expr_if: ExprRef = {
  S<(S<"if"> expr S<"then"> expr S<"else"> expr)> => <>.map(|(i,i1,t,t1,e,e1)|
    arena.alloc(
      Expr::If(If {
        if_: i.def(),
        cond: i1,
        then: t.def(),
        rhs1: t1,
        else_: e.def(),
        rhs2: e1,
      })
    )
  ),
  expr_op
}

// ===================== BEGIN eldritch abomination ===========================
expr_op = expr_op_14;

expr_op_14: ExprRef = {
  S<(expr_op_14 S<"->"> expr_op_13)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Impl),
    })
  )),
  expr_op_13
}

expr_op_13: ExprRef = {
  S<(expr_op_13 S<"||"> expr_op_12)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Or),
    })
  )),
  expr_op_12
}

expr_op_12: ExprRef = {
  S<(expr_op_12 S<"&&"> expr_op_11)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::And),
    })
  )),
  expr_op_11
}

expr_op_11: ExprRef = {
  S<(expr_op_11 S<"=="> expr_op_10)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Eq),
    })
  )),
  S<(expr_op_11 S<"!="> expr_op_10)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Neq),
    })
  )),
  expr_op_10
}

expr_op_10: ExprRef = {
  S<(expr_op_10 S<"<"> expr_op_9)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Le),
    })
  )),
  S<(expr_op_10 S<"<="> expr_op_9)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Leq),
    })
  )),
  S<(expr_op_10 S<">"> expr_op_9)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Ge),
    })
  )),
  S<(expr_op_10 S<">="> expr_op_9)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Geq),
    })
  )),
  expr_op_9
}

expr_op_9: ExprRef = {
  S<(expr_op_8 S<"//"> expr_op_9)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Update),
    })
  )),
  expr_op_8
}

expr_op_8: ExprRef = {
  S<(S<"!"> expr_op_8)> => <>.map(|(op,expr)| arena.alloc(
    Expr::unary(
      op.replace(UnaryOp::Not),
      expr,
    )
  )),
  expr_op_7
}

expr_op_7: ExprRef = {
  S<(expr_op_7 S<"+"> expr_op_6)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Add),
    })
  )),
  S<(expr_op_7 S<"-"> expr_op_6)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Sub),
    })
  )),
  expr_op_6
}

expr_op_6: ExprRef = {
  S<(expr_op_6 S<"*"> expr_op_5)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Mul),
    })
  )),
  S<(expr_op_6 S<"/"> expr_op_5)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Div),
    })
  )),
  expr_op_5
}

expr_op_5: ExprRef = {
  S<(expr_op_4 S<"++"> expr_op_5)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Binary(Binary {
      lhs, rhs,
      op: op.replace(BinaryOp::Concat),
    })
  )),
  expr_op_4
}

expr_op_4: ExprRef = {
  S<(expr_op_4 S<"?"> attrpath)> => <>.map(|(lhs,op,rhs)| arena.alloc(
    Expr::Member(Member {
      lhs,
      question: op.def(),
      path: rhs,
    })
  )),
  expr_op_3
}

expr_op_3: ExprRef = {
  S<(S<"-"> expr_op_3)> => <>.map(|(op,expr)| arena.alloc(
    Expr::unary(
      op.replace(UnaryOp::Negate),
      expr,
    )
  )),
  expr_app
}
// ===================== END eldritch abomination =============================

expr_app: ExprRef = {
  S<(expr_app expr_select)> => <>.map(|(x,y)| arena.alloc(
    Expr::Apply(Apply { lhs: x, rhs: y })
  )),
  expr_select
}

expr_select: ExprRef = {
  S<(expr_simple S<"."> attrpath)> => <>.map(|(lhs,dot,path)| arena.alloc(
    Expr::Select(Select {
      lhs,
      dot: dot.def(),
      path,
      or: None
    })
  )),

  S<(expr_simple S<"."> attrpath S<"or"> expr_select)>
    => <>.map(|(lhs,dot,path,or,o)| arena.alloc(
      Expr::Select(Select {
        lhs,
        dot: dot.def(),
        path,
        or: Some(SelectOr {
          or: or.def(),
          fallback: o,
        }),
      })
    )),

  <start:@L> <lhs:expr_simple> <rhs:S<"or">> <end:@R> => {
    let rhs = rhs.replace(arena.alloc(Expr::Var("or".into())));
    Spanned::new(
      FileSpan::new(
        start as u32,
        end as u32,
        file_id,
      ),
      arena.alloc(Expr::Apply(Apply {
        lhs,
        rhs,
      })),
    )
  },
  expr_simple
}

expr_simple: ExprRef = {
  S<ID> => { <>.map(|x| arena.alloc(if x == "__curPos" {
    Expr::Pos
  } else {
    Expr::Var(x.into())
  })) },
  S<Int> => <>.map(|x| arena.alloc(Expr::Int(x))),
  S<Float> => <>.map(|x| arena.alloc(Expr::Float(x))),

  // regular string
  S<(S<quote> str_part* S<quote>)> => <>.map(|(open,body,close)| arena.alloc(
    Expr::Str(Str {
      open: open.def(),
      body,
      close: close.def(),
    })
  )),
  // indented string
  S<(S<ind_open> ind_str_part* S<ind_close>)>
    => <>.map(|(open,body,close)| arena.alloc(
      Expr::IndStr(IndStr {
        open: open.def(),
        body,
        close: close.def(),
      })
    )),

  S<Path>  => <>.map(|x| arena.alloc(Expr::Path(Path::Plain(x.into())))),
  S<HPath> => <>.map(|x| arena.alloc(Expr::Path(Path::Home(x.into())))),
  S<NPath> => <>.map(|x| arena.alloc(Expr::Path(Path::NixPath {
    open: Spanned::new(
      FileSpan::new(
        <>.span.span.start(),
        <>.span.span.start() + ByteOffset::from(1),
        file_id,
      ),
      Default::default(),
    ),
    path: x.into(),
    close: Spanned::new(
      FileSpan::new(
        <>.span.span.end() - ByteOffset::from(1),
        <>.span.span.end(),
        file_id,
      ),
      Default::default(),
    )
  }))),
  S<Uri> => <>.map(|x| arena.alloc(Expr::Uri(x.into()))),
  "(" <expr> ")",

  // recursive attrset
  S<(S<"rec"> S<"{"> binding* S<"}">)> => <>.map(|(rec,open,binds,close)|
    arena.alloc(
      Expr::AttrSet(AttrSet {
        rec: Some(rec.def()),
        open: open.def(),
        attrs: binds,
        close: close.def(),
      })
    )),
  // flat attrset
  S<(S<"{"> binding* S<"}">)> => <>.map(|(open,binds,close)| arena.alloc(
     Expr::AttrSet(AttrSet {
      rec: None,
      open: open.def(),
      attrs: binds,
      close: close.def()
    })
  )),
  // list literal
  S<(S<"["> expr_select* S<"]">)> => <>.map(|(open,items,close)| arena.alloc(
    Expr::List(List {
      open: open.def(),
      elems: items,
      close: close.def(),
    })
  )),
}

str_part: StrPart = {
  <open:S<"${">> <quote:expr> <close:S<"}">> => StrPart::Quote {
    quote,
    open: open.def(),
    close: close.def(),
  },
  Str => StrPart::Plain(<>.into()),
}

ind_str_part: StrPart = {
  <open:S<"${">> <quote:expr> <close:S<"}">> => StrPart::Quote {
    quote,
    open: open.def(),
    close: close.def(),
  },
  IndStr => StrPart::Plain(<>.into()),
}

#[inline]
S<T>: Spanned<T> = {
  <start:@L> <node:T> <end:@R> => Spanned::new(
    FileSpan::new(start as u32, end as u32, file_id),
    node,
  )
}
